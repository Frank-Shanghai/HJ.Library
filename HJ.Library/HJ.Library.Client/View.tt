<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Web" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".ts" #>

<#

var rootModuleName = "hj.library";

var rootFolder = new ViewFolder{ModuleName = rootModuleName};

string templatesFolderName = @"";
string currentDirectoryPath = Path.GetDirectoryName(Host.TemplateFile);
string templatesDirectoryPath = Path.Combine(new DirectoryInfo(currentDirectoryPath).FullName, templatesFolderName);
foreach (string file in Directory.EnumerateFiles(templatesDirectoryPath, "*View.html", SearchOption.AllDirectories))
{
	var folders = Directory.GetParent(file).FullName.Replace(templatesDirectoryPath, "").Split('\\').Skip(1);
	
	string templateNameSpace = string.Join(".", folders).Trim('.');
	string templateFileName = Path.GetFileNameWithoutExtension(file).Replace(".", "_");
	string templateFileContent = HttpUtility.JavaScriptStringEncode(File.ReadAllText(file));

	var currentFolder = rootFolder;
	var moduleName = rootFolder.ModuleName;

	foreach(var folder in folders)
	{	
		moduleName += "." + folder.ToLower();
		if ( currentFolder.ContainsKey(folder) ){
			currentFolder = currentFolder[folder];
		}
		else{
			currentFolder = (currentFolder[folder] = new ViewFolder{ModuleName = moduleName});
		}

	}

	currentFolder.Views.Add(new View{
		Name = templateFileName,
		FullName = moduleName.Replace(".", "-") + "-" + templateFileName,
		Content = templateFileContent,
		IsComponentView = templateFileName.EndsWith("ComponentView", StringComparison.OrdinalIgnoreCase)
	});
	
}#>
<#=	rootFolder.Build()#>
<#+

public class ViewFolder:Dictionary<string,ViewFolder>{
	public List<View> Views = new List<View>();
	public string ModuleName;

	public string Build(){
		var builder = new StringBuilder();
		var allViews = new List<View>();
		BuildViewClasses(builder, allViews);
		BuildAllViews(builder, allViews);
		return builder.ToString();
	}

	private void BuildViewClasses(StringBuilder builder, List<View> allViews){
		if ( Views.Count > 0){
			builder.AppendFormat("module {0} {{", ModuleName).AppendLine();
			foreach (var view in Views){
				allViews.Add(view);
				if ( view.IsComponentView ){
					builder.AppendFormat("\texport var {0}:string = \"{1}\";", view.Name, view.Content).AppendLine();
				}
				else{
					builder.AppendFormat("\texport var {0}Id:string = \"{1}\";", view.Name, view.FullName).AppendLine();
				}
			}
			builder.AppendLine("}");
		}
		foreach(var folder in this){
			folder.Value.BuildViewClasses(builder, allViews);
		}
	}

	private void BuildAllViews(StringBuilder builder, List<View> allViews){
		builder.AppendFormat("module {0}.views {{",ModuleName).AppendLine()
			.AppendLine("\texport function register(){")
			.AppendLine("\t\tvar bodyElement = $('body');");
		foreach(var view in allViews.Where(v => !v.IsComponentView)){
			builder.AppendFormat("\t\tbodyElement.append('<script type=\"text/html\" id=\"{0}\">{1}</script>');", view.FullName, view.Content).AppendLine();
		}
		builder.AppendLine("\t}")
			.AppendLine("}");
	}
}

public class View { 
	public string Name;
	public string FullName;
	public string Content;
	public bool IsComponentView;
}
#>